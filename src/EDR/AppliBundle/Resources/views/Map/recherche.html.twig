{% extends "::layout.html.twig" %}

{% block body %}

    {#<input id="pac-input" class="controls" type="text"#}
           {#placeholder="Enter a location">#}
    {#<div id="type-selector" class="controls">#}
        {#<input type="radio" name="type" id="changetype-all" checked="checked">#}
        {#<label for="changetype-all">Tous</label>#}

        {#<input type="radio" name="type" id="changetype-establishment">#}
        {#<label for="changetype-establishment">Etablissements</label>#}

        {#<input type="radio" name="type" id="changetype-address">#}
        {#<label for="changetype-address">Adresses</label>#}

        {#<input type="radio" name="type" id="changetype-geocode">#}
        {#<label for="changetype-geocode">Geocodes</label>#}
    {#</div>#}

    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>

{% endblock %}

{% block javascripts %}

    {{ parent() }}

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCkdRROZn9lF8Jwxv22A6YvzMZjwZoQzo0&libraries=places&callback=initMap"
            async defer></script>

    <script>
        var map;
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 48.8770777, lng: 2.3290617},
                zoom: 14,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    map.setCenter(pos);
                }, function() {
                    handleLocationError(true, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, map.getCenter());
            }

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function() {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function() {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function(marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function(place) {
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }
    </script>


{% endblock %}



